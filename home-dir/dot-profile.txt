# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

if [ -f $HOME/.nethackrc ]; then
	export NETHACKOPTIONS="$HOME/.nethackrc"
fi

export VI=vim

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
umask 027

if [ "$HOSTNAME" == "" ]; then
	export HOSTNAME=`hostname`
fi

# Determine whether we are dealing with a local or a remote display
DISPLAY_TYPE="local"
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
	DISPLAY_TYPE="ssh"
else
	case $(ps -o comm= -p $PPID) in
		sshd|*/sshd) DISPLAY_TYPE="ssh";;
	esac
fi

if [ "$DISPLAY_TYPE" == "local" ]; then
	if [[ $(who am i) =~ \([-a-zA-Z0-9\.]+\)$ ]]; then DISPLAY_TYPE="ssh"; else DISPLAY_TYPE="local"; fi
fi
export DISPLAY_TYPE

#if [ "$DISPLAY_TYPE" == "ssh" ]; then
#	export DISPLAY="your-unsecured-x11-server-host:1.0"
#fi

if [ "$TZ" == "" ]; then
	export TZ="America/Regina"
fi

if [ "$BASH" == "" ]; then
	if [ -x /bin/bash ]; then
		export BASH="/bin/bash"
	elif [ -x /usr/bin/bash ]; then
		export BASH="/usr/bin/bash"
	else
		HAS_BASH=`which bash`
		if [ "$HAS_BASH" != "" ]; then
			export BASH="bash"
		fi
		unset HAS_BASH
	fi
fi

if [ -f $HOME/log4j2.properties ]; then
	export LOG4J2_CONF="$HOME/log4j2.properties"
fi

# only add $HOME/bin to the PATH if it exists
if [ -d "$HOME/bin" ]; then
	HOME_BIN_IN_PATH=`echo $PATH | grep "$HOME/bin"`
	if [ "$HOME_BIN_IN_PATH" == "" ]; then
		export PATH="$HOME/bin:$PATH"
	fi
	unset HOME_BIN_IN_PATH
fi

# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
		. "$HOME/.bashrc"
    fi
fi

# GPG needs to know what terminal to use for signing tags
export GPG_TTY=$(tty)

# Force Linux Git implementation
export GIT="git"
export GIT_EDITOR="vim"

$GIT config --global credential.helper 'cache'
$GIT config --global core.editor "vim"
$GIT config --global user.name "Your Name Here"
$GIT config --global user.email "your@email.address"
$GIT config --global user.signingkey XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
$GIT config --global user.gpgsign true

# Always use locally installed ant, as that is the latest release, despite Ubuntu LTS OS

if [ -d $HOME/bin/apache-ant-1.10.7 ]; then
	export ANT_HOME=$HOME/bin/apache-ant-1.10.7
	export ANT_BINDIR=$ANT_HOME/bin
	export ANT_LIB=$ANT_HOME/lib
	export ANT="ant"
	ANT_IN_PATH=`echo $PATH | grep 'apache-ant-1.10.7/bin'`
	if [ "$ANT_IN_PATH" == "" ]; then
		export PATH="$ANT_HOME/bin:$PATH"
	fi
	unset ANT_IN_PATH
else
	ANT_IS_LOCAL=`which ant | grep usr/bin`
	if [ "$ANT_IS_LOCAL" != "" ]; then
		export ANT="ant"
		unset ANT_HOME
		unset ANT_BINDIR
		unset ANT_LIB
	else
		ANT_AVAILABLE=`which ant`
		if [ "$ANT_AVAILABLE" == "" ]; then
			echo "ERROR: Could not find Apache ant"
			unset ANT
		else
			export ANT="ant"
		fi
		unset ANT_AVAILABLE
	fi
	unset ANT_IS_LOCAL
fi

# Prefer the most recent installation of OpenJFX we can find
#if [ -d $HOME/bin/openjfx/javafx-sdk-15.0.1/lib ]; then
#	export JFX_HOME=$HOME/bin/openjfx/javafx-sdk-15.0.1
#	export PATH_TO_FX=$JFX_HOME/lib
#	export PATH="$PATH_TO_FX:$PATH"
#elif [ -d $HOME/bin/openjfx/javafx-sdk-15/lib ]; then
#	export JFX_HOME=$HOME/bin/openjfx/javafx-sdk-15
#	export PATH_TO_FX=$JFX_HOME/lib
#	export PATH="$PATH_TO_FX:$PATH"
if [ -d $HOME/bin/openjfx/javafx-sdk-14/lib ]; then
	export JFX_HOME=$HOME/bin/openjfx/javafx-sdk-14
	export PATH_TO_FX=$JFX_HOME/lib
	export PATH="$PATH_TO_FX:$PATH"
elif [ -d $HOME/bin/openjfx/javafx-sdk-11.0.2/lib ]; then
	export JFX_HOME=$HOME/bin/openjfx/javafx-sdk-11.0.2
	export PATH_TO_FX="$JFX_HOME/lib"
	export PATH="$PATH_TO_FX:$PATH"
elif [ -d /usr/share/openjfx ]; then
	export JFX_HOME=/usr/share/openjfx
	export PATH_TO_FX="$JFX_HOME/lib"
	export PATH="$PATH_TO_FX:$PATH"
elif [ "$JFX_HOME" != "" ]; then
	if [ -d "$JFX_HOME" ]; then
		if [ -d "$JFX_HOME/lib" ]; then
			export PATH_TO_FX="$JFX_HOME/lib"
			export PATH="$PATH_TO_FX:$PATH"
		else
			unset PATH_TO_FX
			unset JFX_HOME
		fi
	else
		unset PATH_TO_FX
		unset JFX_HOME
	fi
fi

# Prefer local installation of OpenJDK 15
if [ -d /home/msobkow/bin/openjdk/15/jdk-15.0.1 ]; then
	export JAVA_HOME="/home/msobkow/bin/openjdk/15/jdk-15.0.1"
	export JDK_HOME="/home/msobkow/bin/openjdk/15/jdk-15.0.1"
elif [ -d /usr/lib/jvm/java-14-openjdk-amd64/bin/java ]; then
	export JAVA_HOME="/usr/lib/jvm/java-14-openjdk-amd64/bin/java"
	export JDK_HOME="/usr/lib/jvm/java-14-openjdk-amd64/bin/java"
elif [ -d /usr/lib/jvm/java-11-openjdk-amd64/bin/java ]; then
	export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64/bin/java"
	export JDK_HOME="/usr/lib/jvm/java-11-openjdk-amd64/bin/java"
else
	unset JAVA_HOME
	unset JDK_HOME
fi
if [ "$JDK_HOME" != "" ]; then
	JDK_IN_PATH=`echo $PATH | grep $JDK_HOME`
	if [ "$JDK_IN_PATH" == "" ]; then
		export PATH="$JDK_HOME/bin:$PATH"
	fi
	unset JDK_IN_PATH
fi

# We want Groovy installed in all cases, as it is commonly
# used with Spring 4 code
WHICH_GROOVY=`which groovy`
if [ "$WHICH_GROOVY" == "" ]; then
	sudo snap install groovy --classic
fi
WHICH_GROOVY=`which groovy`
if [ "$WHICH_GROOVY" == "" ]; then
	echo "ERROR: Groovy was not found and the snap could not be installed."
fi
unset WHICH_GROOVY

# Apache Netbeans 12.1+ is my preferred IDE.
# Just do "sudo snap install netbeans --classic"
WHICH_NETBEANS=`which netbeans`
if [ "$WHICH_NETBEANS" == "" ]; then
	sudo snap install netbeans --classic
fi
WHICH_NETBEANS=`which netbeans`
if [ "$WHICH_NETBEANS" == "" ]; then
	echo "ERROR: Apache Netbeans 12 or newer was not found and the snap could not be installed."
fi
unset WHICH_NETBEANS

# We want eclipse to be on the command line
# Eclipse 2020-09-R is the latest, but the snap for Ubuntu
# is a stale release from 2019, so we don't use the snap.
#
# I want 100% up to date software everywhere I go, not
# stale cruft that likely has security issues, performance
# issues, and/or bugs.
#
# Download manually and install on a per-user basis or get someone to
# keep tracking the CURRENT release of Eclipse with that Ubuntu snap.
if [ "$ECLIPSE_HOME" == "" ]; then
	if [ -d $HOME/bin/eclipse-2020-09-R/eclipse ]; then
		export ECLIPSE_HOME="$HOME/bin/eclipse-2020-09-R"
		ECLIPSE_HOME_IN_PATH=`echo $PATH | grep "$ECLIPSE_HOME/eclipse"`
		if [ "$ECLIPSE_HOME_IN_PATH" == "" ]; then
			export PATH="$ECLIPSE_HOME/eclipse:$PATH"
		fi
		unset ECLIPSE_HOME_IN_PATH
	else
		unset ECLIPSE_HOME
	fi
fi

# Check for latest release of Spring Tool Suite 4
#
# I want 100% up to date software everywhere I go, not
# stale cruft that likely has security issues, performance
# issues, and/or bugs.
#
# Download manually and install on a per-user basis or get someone to
# create and track a snap of the Spring Tool Suite 4 Eclipse Edition.
if [ "$STS4_HOME" == "" ]; then
	if [ -d "$HOME/bin/sts-4.8.1.RELEASE" ]; then
		export STS4_HOME="$HOME/bin/sts-4.8.1.RELEASE"
	elif [ -d "$HOME/bin/sts-4.8.0.RELEASE" ]; then
		export STS4_HOME="$HOME/bin/sts-4.8.0.RELEASE"
	fi
fi
if [ "$STS4_HOME" != "" ]; then
	STS4_IN_PATH=`echo $PATH | grep "$STS4_HOME"`
	if [ "$STS4_IN_PATH" == "" ]; then
		export PATH="$STS4_HOME:$PATH"
	fi
	unset STS4_IN_PATH
fi

